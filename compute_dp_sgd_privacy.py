{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'privacy'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-786937b71243>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mabsl\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mflags\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mprivacy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0manalysis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrdp_accountant\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mcompute_rdp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     41\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mprivacy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0manalysis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrdp_accountant\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mget_privacy_spent\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'privacy'"
     ]
    }
   ],
   "source": [
    "# Copyright 2019 The TensorFlow Authors. All Rights Reserved.\n",
    "#\n",
    "# Licensed under the Apache License, Version 2.0 (the \"License\");\n",
    "# you may not use this file except in compliance with the License.\n",
    "# You may obtain a copy of the License at\n",
    "#\n",
    "#     http://www.apache.org/licenses/LICENSE-2.0\n",
    "#\n",
    "# Unless required by applicable law or agreed to in writing, software\n",
    "# distributed under the License is distributed on an \"AS IS\" BASIS,\n",
    "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
    "# See the License for the specific language governing permissions and\n",
    "# limitations under the License.\n",
    "# ==============================================================================\n",
    "r\"\"\"Command-line script for computing privacy of a model trained with DP-SGD.\n",
    "\n",
    "The script applies the RDP accountant to estimate privacy budget of an iterated\n",
    "Sampled Gaussian Mechanism. The mechanism's parameters are controlled by flags.\n",
    "\n",
    "Example:\n",
    "  compute_dp_sgd_privacy\n",
    "    --N=60000 \\\n",
    "    --batch_size=256 \\\n",
    "    --noise_multiplier=1.12 \\\n",
    "    --epochs=60 \\\n",
    "    --delta=1e-5\n",
    "\n",
    "The output states that DP-SGD with these parameters satisfies (2.92, 1e-5)-DP.\n",
    "\"\"\"\n",
    "\n",
    "from __future__ import absolute_import\n",
    "from __future__ import division\n",
    "from __future__ import print_function\n",
    "\n",
    "import math\n",
    "\n",
    "from absl import app\n",
    "from absl import flags\n",
    "\n",
    "from privacy.analysis.rdp_accountant import compute_rdp\n",
    "from privacy.analysis.rdp_accountant import get_privacy_spent\n",
    "\n",
    "FLAGS = flags.FLAGS\n",
    "\n",
    "flags.DEFINE_integer('N', None, 'Total number of examples')\n",
    "flags.DEFINE_integer('batch_size', None, 'Batch size')\n",
    "flags.DEFINE_float('noise_multiplier', None, 'Noise multiplier for DP-SGD')\n",
    "flags.DEFINE_float('epochs', None, 'Number of epochs (may be fractional)')\n",
    "flags.DEFINE_float('delta', 1e-6, 'Target delta')\n",
    "\n",
    "flags.mark_flag_as_required('N')\n",
    "flags.mark_flag_as_required('batch_size')\n",
    "flags.mark_flag_as_required('noise_multiplier')\n",
    "flags.mark_flag_as_required('epochs')\n",
    "\n",
    "\n",
    "def apply_dp_sgd_analysis(q, sigma, steps, orders, delta):\n",
    "  \"\"\"Compute and print results of DP-SGD analysis.\"\"\"\n",
    "\n",
    "  rdp = compute_rdp(q, sigma, steps, orders)\n",
    "\n",
    "  eps, _, opt_order = get_privacy_spent(orders, rdp, target_delta=delta)\n",
    "\n",
    "  print('DP-SGD with sampling rate = {:.3g}% and noise_multiplier = {} iterated'\n",
    "        ' over {} steps satisfies'.format(100 * q, sigma, steps), end=' ')\n",
    "  print('differential privacy with eps = {:.3g} and delta = {}.'.format(\n",
    "      eps, delta))\n",
    "  print('The optimal RDP order is {}.'.format(opt_order))\n",
    "\n",
    "  if opt_order == max(orders) or opt_order == min(orders):\n",
    "    print('The privacy estimate is likely to be improved by expanding '\n",
    "          'the set of orders.')\n",
    "\n",
    "\n",
    "def main(argv):\n",
    "  del argv  # argv is not used.\n",
    "\n",
    "  q = FLAGS.batch_size / FLAGS.N  # q - the sampling ratio.\n",
    "\n",
    "  if q > 1:\n",
    "    raise app.UsageError('N must be larger than the batch size.')\n",
    "\n",
    "  orders = ([1.25, 1.5, 1.75, 2., 2.25, 2.5, 3., 3.5, 4., 4.5] + range(5, 64) +\n",
    "            [128, 256, 512])\n",
    "\n",
    "  steps = int(math.ceil(FLAGS.epochs * FLAGS.N / FLAGS.batch_size))\n",
    "\n",
    "  apply_dp_sgd_analysis(q, FLAGS.noise_multiplier, steps, orders, FLAGS.delta)\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "  app.run(main)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
